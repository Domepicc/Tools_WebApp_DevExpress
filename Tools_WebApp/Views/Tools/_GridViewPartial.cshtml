@using DevExtreme.AspNet.Mvc;
@using System.Web.UI.WebControls;




@{


    var grid = Html.DevExpress().GridView(settings =>
    {

        settings.Name = "GridViewTools";

        settings.CallbackRouteValues = new
        {
            Controller = "Tools",
            Action = "GridViewPartial",
        };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Tools", Action = "GridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Tools", Action = "GridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Tools", Action = "GridViewPartialDelete" };

        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;

        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;

        settings.SettingsBehavior.AllowClientEventsOnLoad = true;



        settings.ClientSideEvents.CustomButtonClick = "OnGetRowValue";
        settings.CommandColumn.CustomButtons.Add(new GridViewCommandColumnCustomButton()
        {
            ID = "ReportPreview",
            Text = "ReportPreview",
            Visibility = GridViewCustomButtonVisibility.AllDataRows
        });


        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.ShowAllItem = true;
        settings.SettingsPager.PageSizeItemSettings.Position = PagerPageSizePosition.Left;

        settings.KeyFieldName = "IdTool";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add("IdTool");
        settings.Columns.Add("BoschCode");
        settings.Columns.Add("Description");
        settings.Columns.Add("PrimarySupplier");
        settings.Columns.Add("SecondarySupplier");
        settings.Columns.Add("Quantity");

        GridViewFormatConditionColorScale format1 = new GridViewFormatConditionColorScale();
        format1.FieldName = "Quantity";
        format1.Format = GridConditionColorScaleFormat.Custom;
        format1.MaximumColor = System.Drawing.Color.ForestGreen;
        format1.MinimumColor = System.Drawing.Color.LightGreen;
        format1.MinimumValue = ViewData["Min"];
        format1.MaximumValue = ViewData["Max"];


        settings.FormatConditions.Add(format1);

        settings.Columns.Add(column =>
        {
            column.VisibleIndex = settings.Columns.Count + 1;
            column.FieldName = "Unbound";
            column.Caption = "QrCode";
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
            column.EditFormSettings.Visible = DevExpress.Utils.DefaultBoolean.False;
            column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent((c) =>
            {
                Html.DevExpress().BinaryImage(b =>
                {

                    b.Name = "Qr_Code_Button" + c.KeyValue;
                    b.Properties.ClientSideEvents.BeginCallback = $"Qr_Code_Column('Qr_Code_Button', '{c.KeyValue}')";
                    b.Properties.ClientSideEvents.Click = $"function(s, e) {{ QrCore_Click( {c.KeyValue} ) }}";


                }).GetHtml();
            });
        });

        settings.Columns.Add(column =>
        {
            column.VisibleIndex = settings.Columns.Count + 1;
            column.FieldName = "Unbound";
            column.Caption = "Report";
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
            column.EditFormSettings.Visible = DevExpress.Utils.DefaultBoolean.False;
            column.Width = Unit.Percentage(10);
            column.SetDataItemTemplateContent((c) =>
            {
                Html.DevExpress().Button(b =>
                {
                    b.Name = "Create_Report_Button" + c.KeyValue;
                    b.Text = "Download";
            //b.RouteValues = new { Controller = "Tools", Action = "GridViewPartialReportDownload", id = c.KeyValue.ToString() };
            string ReportDownloadLink = "https://localhost:44340/Tools/GridViewPartialReportDownload/" + c.KeyValue.ToString();
                    string ReportDownloadString = string.Format("function(s, e) {{  window.location= '{0}' }}", ReportDownloadLink);
                    b.ClientSideEvents.Click = ReportDownloadString;
                }).GetHtml();
            });
        });



        settings.Columns.Add(column =>
        {
            column.VisibleIndex = settings.Columns.Count + 1;
            column.FieldName = "Unbound";
            column.Caption = "Report Preview";
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
            column.EditFormSettings.Visible = DevExpress.Utils.DefaultBoolean.False;
            column.Width = Unit.Percentage(10);
            column.SetDataItemTemplateContent((c) =>
            {
                Html.DevExpress().Button(b =>
                {
                    b.Name = "Report_Preview_Button" + c.KeyValue;
                    b.Text = "Preview";
                    string ReportPreviewLink = "https://localhost:44340/Tools/GridViewPartialReportPreview/" + c.KeyValue.ToString();
                    string ReportPreviewString = string.Format("function(s, e) {{  window.open( '{0}' ) }}", ReportPreviewLink);
                    b.ClientSideEvents.Click = ReportPreviewString;
                }).GetHtml();
            });
        });




    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }


}

@grid.Bind(Model).GetHtml()










